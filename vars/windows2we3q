以下是针对您需求的 SlackHQ Nebula 详细配置方案，实现 EC2-A (10.11.2.1) 通过 EC2-B (10.135.2.14) 访问 EC2-C (10.101.2.4:3128)：

一、网络拓扑与前提条件
节点	私有IP	角色	访问关系
EC2-A	10.11.2.1	客户端	可直连 EC2-B，不可连 EC2-C
EC2-B	10.135.2.14	中继节点	可直连 EC2-C
EC2-C	10.101.2.4	服务端（3128端口）	仅允许 EC2-B 访问
要求：所有节点均无公网IP，需通过 Nebula 虚拟组网。

二、Nebula 配置步骤
1. 生成证书（在 Lighthouse 或管理节点操作）
bash
# 为每个节点分配虚拟IP（需确保不与实际私有IP冲突）
nebula-cert sign -name "ec2-a" -ip "192.168.100.1/24"
nebula-cert sign -name "ec2-b" -ip "192.168.100.2/24"
nebula-cert sign -name "ec2-c" -ip "192.168.100.3/24"
关键点：虚拟IP（如 192.168.100.0/24）与实际私有IP完全独立。

2. EC2-B 配置（中继节点）
/etc/nebula/config.yml：

yaml
pki:
  ca: /etc/nebula/ca.crt
  cert: /etc/nebula/ec2-b.crt
  key: /etc/nebula/ec2-b.key

# 使用 EC2 私有IP作为直连地址
static_host_map:
  "192.168.100.1": ["10.11.2.1:4242"]  # EC2-A
  "192.168.100.3": ["10.101.2.4:4242"] # EC2-C

listen:
  host: 0.0.0.0
  port: 4242

tun:
  dev: nebula1

firewall:
  inbound:
    - port: any
      proto: any
      host: any
  outbound:
    - port: any
      proto: any
      host: any
3. EC2-A 配置（客户端）
/etc/nebula/config.yml：

yaml
pki:
  ca: /etc/nebula/ca.crt
  cert: /etc/nebula/ec2-a.crt
  key: /etc/nebula/ec2-a.key

static_host_map:
  "192.168.100.2": ["10.135.2.14:4242"]  # 仅需指向EC2-B

lighthouse:
  am_lighthouse: false

tun:
  dev: nebula1
4. EC2-C 配置（服务端）
/etc/nebula/config.yml：

yaml
pki:
  ca: /etc/nebula/ca.crt
  cert: /etc/nebula/ec2-c.crt
  key: /etc/nebula/ec2-c.key

static_host_map:
  "192.168.100.2": ["10.135.2.14:4242"]  # 仅需指向EC2-B

firewall:
  inbound:
    - port: 3128    # 只开放3128端口
      proto: tcp
      host: "192.168.100.2"  # 仅允许EC2-B的虚拟IP访问
三、流量转发配置（关键步骤）
在 EC2-B 上启用 IP 转发和 NAT：
bash
# 启用内核转发
echo 1 > /proc/sys/net/ipv4/ip_forward

# 添加iptables规则（将EC2-A的流量转发到EC2-C）
iptables -t nat -A PREROUTING -p tcp -s 10.11.2.1 --dport 3128 -j DNAT --to-destination 10.101.2.4:3128
iptables -t nat -A POSTROUTING -p tcp -d 10.101.2.4 --dport 3128 -j SNAT --to-source 10.135.2.14
在 EC2-A 上测试连接：
bash
curl -x http://192.168.100.3:3128 http://example.com
流量路径：EC2-A → Nebula隧道 → EC2-B → 实际网络 → EC2-C

四、验证与调试
检查 Nebula 连接状态：

bash
nebula -test -config /etc/nebula/config.yml
查看路由表：

bash
ip route show dev nebula1
抓包分析（在 EC2-B 上）：

bash
tcpdump -i any host 10.101.2.4 and port 3128
五、最终网络流示意图
text
EC2-A (192.168.100.1) 
  │
  ↓ Nebula隧道
EC2-B (192.168.100.2) → 实际网络 → EC2-C (10.101.2.4:3128)
常见问题解决
连接超时：检查 EC2-B 的 iptables 规则和内核转发是否生效。

Nebula 无法建立隧道：确认所有节点的 static_host_map 配置正确。

权限问题：确保 Nebula 证书权限为 600。

如果需要更详细的防火墙规则或性能优化，可以进一步调整配置！


===============================================

好的，我将为你生成一个完整的 SlackHQ Nebula 配置包示例结构，包括：

✅ 证书结构（ca, cert, key）

✅ 各机器的 nebula.yml 配置文件

✅ 文件目录结构示意

你可以在一台主机上先生成证书并打包，然后分发到三台 EC2 机器上。

🗂️ 配置包目录结构（示意）
text
Copy
Edit
nebula-config/
├── ca.crt
├── ec2-a/
│   ├── config.yml
│   ├── cert.crt
│   ├── cert.key
├── ec2-b/
│   ├── config.yml
│   ├── cert.crt
│   ├── cert.key
├── ec2-c/
│   ├── config.yml
│   ├── cert.crt
│   ├── cert.key
🛠️ 步骤 1：生成 CA 和主机证书（一次性）
在本地或任意一台机器上操作：

bash
Copy
Edit
# 下载工具
wget https://github.com/slackhq/nebula/releases/download/v1.4.0/nebula-cert-linux-amd64
chmod +x nebula-cert-linux-amd64
mv nebula-cert-linux-amd64 nebula-cert

# 创建 CA
./nebula-cert ca -name "nebula-net"

# 为 EC2-A（Nebula IP: 192.168.100.1）
./nebula-cert sign -name "ec2-a" -ip "192.168.100.1/24" -groups "clients"

# 为 EC2-B（Nebula IP: 192.168.100.2）
./nebula-cert sign -name "ec2-b" -ip "192.168.100.2/24" -groups "relay,lighthouse"

# 为 EC2-C（Nebula IP: 192.168.100.3）
./nebula-cert sign -name "ec2-c" -ip "192.168.100.3/24" -groups "servers"
📄 各节点配置（config.yml）
✅ EC2-A (ec2-a/config.yml)
yaml
Copy
Edit
pki:
  ca: "../ca.crt"
  cert: "cert.crt"
  key: "cert.key"

lighthouse:
  am_lighthouse: false
  hosts:
    - "10.135.2.14:4242"

listen:
  host: 0.0.0.0
  port: 4242

static_host_map:
  "192.168.100.2": ["10.135.2.14:4242"]

relay:
  relays:
    - "192.168.100.2"

firewall:
  outbound:
    - port: any
      proto: any
      host: any
  inbound:
    - port: any
      proto: any
      host: any
✅ EC2-B (ec2-b/config.yml)
yaml
Copy
Edit
pki:
  ca: "../ca.crt"
  cert: "cert.crt"
  key: "cert.key"

lighthouse:
  am_lighthouse: true
  interval: 60

listen:
  host: 0.0.0.0
  port: 4242

relay:
  am_relay: true

firewall:
  outbound:
    - port: any
      proto: any
      host: any
  inbound:
    - port: any
      proto: any
      host: any
✅ EC2-C (ec2-c/config.yml)
yaml
Copy
Edit
pki:
  ca: "../ca.crt"
  cert: "cert.crt"
  key: "cert.key"

lighthouse:
  am_lighthouse: false
  hosts:
    - "10.135.2.14:4242"

listen:
  host: 0.0.0.0
  port: 4242

static_host_map:
  "192.168.100.2": ["10.135.2.14:4242"]

relay:
  can_relay: true

firewall:
  outbound:
    - port: any
      proto: any
      host: any
  inbound:
    - port: any
      proto: any
      host: any
🚀 启动方式（每台 EC2）
将对应的目录和 ca.crt 拷贝到每台机器，例如：

bash
Copy
Edit
scp -r nebula-config/ec2-a/* ec2-user@10.11.2.1:/etc/nebula/
scp nebula-config/ca.crt ec2-user@10.11.2.1:/etc/nebula/
然后在每台机器上运行：

bash
Copy
Edit
./nebula -config /etc/nebula/config.yml &
🔍 测试连接
在 EC2-A 上：

bash
Copy
Edit
curl http://192.168.100.3:3128
如果 EC2-C 上的 3128 正在监听（如 Squid 代理），你应该可以成功访问。

🧱 补充建议
建议将防火墙（如 AWS 安全组）打开 UDP 4242

可使用 systemd 启动 nebula 为服务

可将 groups 用于访问控制
